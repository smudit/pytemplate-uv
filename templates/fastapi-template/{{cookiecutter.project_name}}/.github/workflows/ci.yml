name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install UV
      run: |
        pip install uv
        
    - name: Create Virtual Environment
      run: |
        uv venv
        source .venv/bin/activate
        
    - name: Install Dependencies
      run: |
        uv pip install -e ".[dev]"
        
    - name: Run Ruff Linter
      run: |
        uv run lint
        
    {%- if cookiecutter.mypy == "y" %}
    - name: Run Type Checking with Mypy
      run: |
        uv run mypy {{cookiecutter.package_name}}
    {%- else %}
    - name: Skip Type Checking
      run: echo "Type checking skipped"
    {%- endif %}
        
    - name: Run Tests with Coverage
      run: |
        uv run test-cov
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: my codecov token
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        path_to_write_report: ./coverage/codecov_report.txt
        verbose: true
        
  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        pip install safety
        pip install -e .
        
    - name: Run Safety Check
      run: |
        safety check
        
  publish:
    needs: [lint-and-test, security-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: |
        pip install build twine
        
    - name: Build Package
      run: python -m build
      
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: your-username
        TWINE_PASSWORD: your-password
      run: twine upload dist/*
